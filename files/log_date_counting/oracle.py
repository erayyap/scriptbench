import re
import sys

def find_and_print_date_lines(log_file_path):
    """
    Identifies, prints, and counts the true number of date-logged lines by
    excluding all known non-date log patterns.
    """

    # These regex patterns are specifically crafted to match the unique structure
    # of each non-date log type generated by the original script.
    NON_DATE_PATTERNS = [
        # --- Imposter Patterns ---
        re.compile(r"INFO: System updated to version v\d{4}\.\d{1,2}\.\d{1,2}"), # Type 2
        re.compile(r"CRITICAL: Transaction \d{4}-\d{2}-\d{2}-[a-f0-9]{8} failed"), # Type 3
        re.compile(r"DEBUG: Starting CI build \d{8}\.\d+ for branch"), # Type 4
        re.compile(r"WARNING: Unrecognized connection attempt from"), # Type 5
        re.compile(r"INFO: Log rotation complete. Archived log to /var/logs/archive/"), # Type 6
        re.compile(r"DEBUG: Inventory check for SKU: \d{2}-\d{2}-\d{4}-[A-Z]{2}"), # Type 7
        re.compile(r"INFO: System load average: \d+\.\d{2}/\d+\.\d{2}/\d+\.\d{2}"), # Type 8
        re.compile(r"INFO: Processed \d{4}-\d{1,2}-\d{1,2} events in the last cycle"), # Type 9

        # --- General Realistic Log Patterns ---
        re.compile(r"^\[(INFO|DEBUG|WARNING|ERROR|CRITICAL)\] \[(AuthService|DatabaseConnector|APIGateway|BillingWorker|CacheManager|FrontendApp|TaskScheduler)\]"), # Type 10
        re.compile(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3} - user-\d+ "'), # Type 11
        re.compile(r"AUDIT: User '.*' performed action '.*'\. SessionID:"), # Type 12
        re.compile(r"DEBUG: \[DatabaseConnector\] Executed query on table '.*' in \d+\.\d{2}ms"), # Type 13
        re.compile(r"INFO: (AuthService|DatabaseConnector|APIGateway|BillingWorker|CacheManager|FrontendApp|TaskScheduler) starting up on port \d+"), # Type 14
        re.compile(r'^{\"level\": \".*\", \"message\": \".*\", \"trace_id\": \".*\"}$'), # Type 15
        re.compile(r"DEBUG: \[CacheManager\] Cache (HIT|MISS|SET|EVICT) for key:"), # Type 16
        re.compile(r"INFO: \[TaskScheduler\] Job job-\d+ (started|completed successfully|failed)"), # Type 17
        re.compile(r"CRITICAL: \[AuthService\] Multiple failed login attempts detected from IP:"), # Type 18
        re.compile(r"WARNING: Deprecated endpoint .* was called\. Please use .* instead\."), # Type 19
        re.compile(r"DEBUG: System resource usage: CPU at .*%, Memory at .*MB\."), # Type 20
        re.compile(r"ERROR: Unhandled exception caught: .* in .*"), # Type 21 (and its stack trace lines)
        re.compile(r"\s+at com\..*\.java:\d+\)"), # Stack trace line
        re.compile(r"INFO: User profile loaded for user=.* duration_ms=\d+") # Type 22
    ]

    date_line_count = 0
    total_lines = 0

    print("--- Oracle Script: Lines Identified as Containing Dates ---\n")

    try:
        with open(log_file_path, "r") as f:
            for line in f:
                total_lines += 1
                is_non_date_line = False
                for pattern in NON_DATE_PATTERNS:
                    if pattern.search(line):
                        is_non_date_line = True
                        break

                # If the line did not match any of the non-date patterns, it contains a date.
                if not is_non_date_line:
                    date_line_count += 1
                    # Print the identified line. The `end=''` prevents extra newlines.
                    print(line, end='')

    except FileNotFoundError:
        print(f"Error: The file '{log_file_path}' was not found.")
        return None
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

    print("\n--- Oracle Script Summary ---")
    print(f"Processed {total_lines} total lines from '{log_file_path}'.")
    print(f"The true number of lines containing dates is: {date_line_count}")
    return date_line_count


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python oracle_script.py <path_to_log_file>")
        sys.exit(1)

    log_file = sys.argv[1]
    find_and_print_date_lines(log_file)