agent:
  system_template: |
    You are a helpful assistant that can interact with a computer.

    Your response must contain exactly ONE bash code block with ONE command (or commands chained with && or ||).
    Precede every command with a THOUGHT line that explains your reasoning.
    Format your response exactly as shown in <format_example>.

    <format_example>
    THOUGHT: Explain why you are about to run the next command.

    ```bash
    your_command_here
    ```
    </format_example>

    Failure to follow this format will result in the command being rejected.
  instance_template: |
    You are solving a ScriptBench task.

    ## Task
    {{task}}

    {% if mini_swe_has_loaded_assets %}
    You start in a workspace located at {{mini_swe_workspace}}. Unless resources are listed below, it begins empty. Create any files you need. Feel free to explore, experiment, run tests, and iterate as required.
    The task's referenced folders/files/URLs are not auto-populated here; only items listed under Preloaded resources will exist. Treat this workspace as your sandbox to prototype and refine your script.
    {% else %}
    You start in an empty directory located at {{mini_swe_workspace}}. Create any files you need. Feel free to explore, experiment, run tests, and iterate as required.
    Use this space to probe the kinds of data you'll encounter and refine your script; treat it as your sandbox.
    {% endif %}

    {% if mini_swe_has_loaded_assets %}
    ## Preloaded resources
    The following resources have already been staged inside your workspace (paths are relative to {{mini_swe_workspace}}):
    {% for folder in mini_swe_loaded_folders %}
    - Folder: {{ folder }}
    {% endfor %}
    {% for file in mini_swe_loaded_files %}
    - File: {{ file }}
    {% endfor %}
    {% endif %}

    A Python virtual environment is already created for you at {{mini_swe_workspace_venv}} and activated for every command you run.
    - Python interpreter: {{mini_swe_workspace_python}}
    - pip executable: {{mini_swe_workspace_pip}}

    Use pip inside this environment to manage Python dependencies. You do not need to list them manually—any installed packages will be recorded automatically. If system packages are required, install them with `apt-get`; successful installations will also be tracked for you.

    ## Required final deliverable
    When you are ready to finish, emit the completion signal by printing `END` on a line by itself followed by the relative path to your solution script on the next line. Example:

    ```bash
    printf 'END\nrelative/path/to/your_script.py\n'
    ```

    Requirements:
    - The path must be relative to the workspace root and point to an existing Python script.
    - The script must succeed when executed with `python <relative-path>` from a fresh environment.
    - Do **not** include additional output alongside the completion signal and script path.

    You may continue iterating after printing the completion signal; the task only ends once the evaluation framework observes it.

    ## Recommended workflow
    1. Understand the requirements.
    2. Gather any data or helper files you need.
    3. Prototype your solution in incremental steps.
    4. Verify your final script path and run the completion command shown above.

    If you need more data after starting the finish sequence, simply continue working—the task will not end until you emit the completion signal.
  action_observation_template: |
    <returncode>{{output.returncode}}</returncode>
    {% if output.output | length < 10000 -%}
    <output>
    {{ output.output -}}
    </output>
    {%- else -%}
    <warning>
    The output of your last command was too long.
    Prefer commands that produce smaller output or redirect to files that you inspect selectively.
    </warning>
    {%- endif -%}
  format_error_template: |
    Please always provide EXACTLY ONE bash command enclosed in triple backticks and a THOUGHT line beforehand.
  step_limit: 0
  cost_limit: 0
environment:
  env:
    PAGER: cat
    MANPAGER: cat
    LESS: -R
    PIP_PROGRESS_BAR: 'off'
    TQDM_DISABLE: '1'
